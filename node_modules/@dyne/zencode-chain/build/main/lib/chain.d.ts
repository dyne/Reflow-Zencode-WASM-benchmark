declare type Step = {
    readonly id: string;
    readonly zencode: string;
    readonly data?: string;
    readonly dataFromStep?: string;
    readonly dataTransform?: ((data: string) => string) | ((data: string) => Promise<string>);
    readonly keys?: string;
    readonly keysFromStep?: string;
    readonly keysTransform?: ((keys: string) => string) | ((keys: string) => Promise<string>);
    readonly conf?: string;
    readonly onAfter?: ((result: string, zencode: string, data: string | undefined, keys: string | undefined, conf: string | undefined) => void) | ((result: string, zencode: string, data: string | undefined, keys: string | undefined, conf: string | undefined) => Promise<void>);
    readonly onBefore?: ((zencode: string, data: string | undefined, keys: string | undefined, conf: string | undefined) => void) | ((zencode: string, data: string | undefined, keys: string | undefined, conf: string | undefined) => Promise<void>);
};
declare type Steps = {
    readonly steps: readonly Step[];
    readonly conf?: string;
    readonly verbose?: boolean;
};
export declare const execute: (steps: Steps) => Promise<string>;
export {};
